#!/bin/sh
# ** (c) 2020 TosoBoso - start-stop and other cli for Jitsi-Meet in Docker container
# ** get lang, variables from lib and add functions, more variables, adjust script-dir when called by softlink
SCRIPT_DIR=$(dirname "$0")
[ -f "$SCRIPT_DIR"/lib  ] || SCRIPT_DIR=/var/packages/Jitsi-Meet/scripts
. "$SCRIPT_DIR"/lib
. "$SCRIPT_DIR"/common
LOGIN=$(whoami)
if [ "$LOGIN" != "root" ]
then
	MSG=$(MESSAGE_LANG "$SUDO_MODE")
	echo "$MSG"
	SUDO="sudo"
else
	SUDO=""
fi
# source cfg file, make it readable if not root
[ "$SUDO" = "" ] || sudo chmod 644 "$ETC_PATH"/.cfg
. "$ETC_PATH"/.cfg
[ "$SUDO" = "" ] || sudo chmod 640 "$ETC_PATH"/.cfg

MYSCRIPT=$(basename "$0")
case $1 in
    start)
        echo "Starting $CONTAINERS..."
		if ! PUBLIC_IP_IN_SYNC ; then
			UPDATE_PUBLIC_IP
		fi
		# initial start after reset: start to get cfg, run real-ip, special settings restart
		if [ ! -e /etc/jitsi/web/nginx ] ; then
			START_CONTAINER
			NGINX_X_REAL_IP
			SPECIAL_SETTINGS
			STOP_CONTAINER
		fi
		UPDATE_CERT
		START_CONTAINER
		[ -f /etc/jitsi/prosody/.usr-created ] || CREATE_USERS
		# list nginx-error-log last entry
		WEB_ERR=$(EXEC_IN_CONTAINER web "tail -1 /var/log/nginx/error.log")
		[ -z "$WEB_ERR" ] || echo "Jitsi-Web last error: $WEB_ERR"
 		exit 0
      ;;
    stop)
        echo "Stopping $CONTAINERS..."
		STOP_CONTAINER
		exit 0
        ;;
    status)
		# quick status on containers not using compose for max performance to Synology GUI
		if ! QUICKSTAT_CONTAINER ; then
			exit 1
		fi
		# as jitsi-cli act more verbose with longer compose response time 
		if [ "$MYSCRIPT" = "jitsi-cli" ] ; then
	        echo "Running - fetching details..."
			STATUS_CONTAINER
		fi
		exit 0
        ;;
    health)
		HEALTH_OK=1
		if ! QUICKSTAT_CONTAINER ; then
			MSG="Some Container are stopped restart and check logs.."
			#MSG=$(MESSAGE_LANG "$CONT_STOPPED")
			echo "$MSG"
			HEALTH_OK=0
		fi
		if ! PUBLIC_IP_IN_SYNC ; then
			MSG="Your routers public IP is out of sync with Jitsi Docker-Settings; run start to resync.."
			#MSG=$(MESSAGE_LANG "$PUBIP_OUTSYNC")
			echo "$MSG"			
			MSG="Hint: schedule $MYSCRIPT start each morning in case routers dynamic IP changes each night"
			#MSG=$(MESSAGE_LANG "$RESTART_4IPSYNC")
			echo "$MSG"
			HEALTH_OK=0
		fi
		if ! DOCKER_UPDATE_IN_SYNC ; then
			MSG="New Jitsi images have been released on Docker-Hub; run $MYSCRIPT refresh.."
			#MSG=$(MESSAGE_LANG "$IMG_OUTSYNC")
			echo "$MSG"			
			MSG="Hint: schedule $MYSCRIPT refresh each week to stay in sync with Docker images releases.."
			#MSG=$(MESSAGE_LANG "$RESTART_4IPSYNC")
			echo "$MSG"
			HEALTH_OK=0
		fi
		DO_ETHERPAD=$($SUDO /bin/get_key_value "$ETC_PATH"/.cfg SYNOPKG_ETHERPAD)
		[ -z "$DO_ETHERPAD" ] && DO_ETHERPAD=0
		# shellcheck disable=SC2086
		if [ $DO_ETHERPAD -eq 1 ] && $SUDO grep -q "^#ETHERPAD_URL_BASE" "$ETC_PATH"/.env ; then
			MSG="Etherpad container is enabled but in environment file ETHERPAD_URL_BASE is commented out, so it will not work.."
			#MSG=$(MESSAGE_LANG "$ETHPAD_ENABLE")
			echo "$MSG"
			HEALTH_OK=0
		fi
		if [ $HEALTH_OK -eq 1 ] ; then
			DOCKER_UPDATE=$(GET_DOCKER_UPDATE web)
			MSG="Everything looks healthy for Jitsi-Meet on Images from $DOCKER_UPDATE.."
			#MSG=$(MESSAGE_LANG "$HEALTY")
			echo "$MSG"
			exit 0
		else
			exit 0
		fi
        ;;
    log)
		case "$2" in
			web)
				SERVICE=jitsi_web
				;;
			prosody)
				SERVICE=jitsi_prosody
				;;
			jicofo)
				SERVICE=jitsi_jicofo
				;;
			jvb)
				SERVICE=jitsi_jvb
				;;
			etherpad)
				SERVICE=jitsi_etherpad
				;;
			jibri)
				SERVICE=jitsi_jibri
				;;
			jigasi)
				SERVICE=jitsi_jigasi
				;;
			pkg)
				if [ -t 1 ] ; then $SUDO chmod 666 "$LOG_FILE" ; fi
				MSG=$(tail -50 < "$LOG_FILE")
				if [ -t 1 ] ; then $SUDO chmod 666 "$LOG_FILE" ; fi
				echo "last 50 lines of $LOG_FILE:"
				echo "$MSG"
				exit 0
				;;
			rooms)
				echo "log from containers for rooms opened and joined will be implemented later.."
				exit 0
				;;
			*)
				echo "Need type of log: pkg, rooms, web, prosody, jicofo, jvb"
				exit 1
				;;
		esac
		CONTAINER_LOGS "$SERVICE"
 		exit 0
       ;;
    reset)
		LOG_IF_BETA "running REMOVE_CONTAINER.."
		REMOVE_CONTAINER
		LOG_IF_BETA "running COMPOSE_CONTAINER.."
		COMPOSE_CONTAINER
		# in ajax gui mode do not run start sequence as it would time-out
		if [ ! -t 1 ] && [ "$2" != "bgmode" ] ; then
			echo "Now run ** $MYSCRIPT start **"
		else
			LOG_IF_BETA "running UPDATE_PUBLIC_IP.."
			UPDATE_PUBLIC_IP
			LOG_IF_BETA "running START_CONTAINER.."
			START_CONTAINER
			LOG_IF_BETA "running SPECIAL_SETTINGS.."
			SPECIAL_SETTINGS
			LOG_IF_BETA "running NGINX_X_REAL_IP, UPDATE_CERT.."
			NGINX_X_REAL_IP
			UPDATE_CERT
			START_CONTAINER
			CREATE_USERS
			WEB_ERR=$(EXEC_IN_CONTAINER web "tail -1 /var/log/nginx/error.log")
			[ -z "$WEB_ERR" ] || echo "Jitsi-Web last error: $WEB_ERR"
			MSG=$(MESSAGE_LANG "$RESET_IMAGES")
			LOG_MESSAGE "$MSG"
			if [ "$2" = "bgmode" ] ; then
				NOTIFY_MESSAGE "$MSG"
			fi
			LOG_IF_BETA "done.."
		fi
 		exit 0
       ;;
    refresh)
		if DOCKER_UPDATE_IN_SYNC ; then
			MSG="Your Images and Container are up to date with Jitsi on Docker-Hub.."
			#MSG=$(MESSAGE_LANG "$IMAGES_INSYNC")
			echo "$MSG"			
		else
			# refresh env, compose and docker images as these to avoid new features not reflected in env
			LOG_IF_BETA "running LOAD_REPO_CFG.."
			LOAD_REPO_CFG
			LOG_IF_BETA "running REFRESH_ENV.."
			REFRESH_ENV
			# set new Docker_Update into cfg
			DOCKER_UPDATE=$(GET_DOCKER_UPDATE web)
			$SUDO sed -i -e "s~SYNOPKG_DOCKER_UPDATE=.*~SYNOPKG_DOCKER_UPDATE=${DOCKER_UPDATE}~" "$ETC_PATH"/.cfg
			LOG_IF_BETA "running REMOVE_CONTAINER/IMAGES,COMPOSE_CONTAINER and restart.."
			REMOVE_CONTAINER
			REMOVE_IMAGES
			COMPOSE_CONTAINER
			# in ajax gui mode do not run start sequence as it would time-out
			if [ ! -t 1 ] && [ "$2" != "bgmode" ] ; then
				echo "Now run ** $MYSCRIPT start **"
			else
				UPDATE_PUBLIC_IP
				START_CONTAINER
				SPECIAL_SETTINGS
				NGINX_X_REAL_IP
				UPDATE_CERT
				START_CONTAINER
				CREATE_USERS
				WEB_ERR=$(EXEC_IN_CONTAINER web "tail -1 /var/log/nginx/error.log")
				[ -z "$WEB_ERR" ] || echo "Jitsi-Web last error: $WEB_ERR"
				MSG=$(MESSAGE_LANG "$REFRESHED_IMAGES" "$IMAGES")
				LOG_MESSAGE "$MSG"
				if [ "$2" = "bgmode" ] ; then
					NOTIFY_MESSAGE "$MSG"
				fi
			fi
		fi
		exit 0
        ;;
    cmd-line)
		case "$2" in
			web)
				SERVICE=web
				;;
			prosody)
				SERVICE=prosody
				;;
			jicofo)
				SERVICE=jicofo
				;;
			jvb)
				SERVICE=jvb
				;;
			etherpad)
				SERVICE=etherpad
				;;
			jibri)
				SERVICE=jibri
				;;
			jigasi)
				SERVICE=jigasi
				;;
			*)
				echo "Need service for cmd-line: web, prosody, jicofo, jvb, etherpad"
				exit 1
				;;
		esac
		# command defaults to bash to get into container
		if [ -n "$3" ] ; then
			CMD="$3"
		else
			CMD="bash"
		fi
		EXEC_IN_CONTAINER "$SERVICE" "$CMD"
		exit 0
		;;
    add-usr)
		if [ $# -lt 3 ] ; then
			echo "Please provide user to add and password as parameters.."
			exit 1
		fi
		echo "adding user $2 via prosodyctl in prosody container.."
		EXEC_IN_CONTAINER prosody "prosodyctl --config /config/prosody.cfg.lua register $2 meet.jitsi $3"
		STORE_USER "$2" "$3"
		exit 0
		;;
    del-usr)
		if [ $# -lt 2 ] ; then
			echo "Please provide user to delete as parameters.."
			exit 1
		fi
		echo "deleting user $2 via prosodyctl in prosody container.."
		EXEC_IN_CONTAINER prosody "prosodyctl --config /config/prosody.cfg.lua deluser ${2}@meet.jitsi"
		REMOVE_USER "$2"
		exit 0
		;;
    *)
		echo "usage $MYSCRIPT start | stop | status | health | log | reset | refresh | add-usr | del-usr | cmd-line"
        exit 1
        ;;
esac